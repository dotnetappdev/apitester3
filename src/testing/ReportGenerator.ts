import { TestExecutionResult } from './TestRunner';

export interface ReportOptions {
  title?: string;
  generatedBy?: string;
  includeDetails?: boolean;
}

export class TestReportGenerator {
  static generateJsonReport(results: TestExecutionResult[], options?: ReportOptions) {
    return JSON.stringify({
      title: options?.title || 'API Tester Report',
      generatedBy: options?.generatedBy || 'VerifyApi',
      generatedAt: new Date().toISOString(),
      summary: TestReportGenerator.summarize(results),
      results
    }, null, 2);
  }

  static generateHtmlReport(results: TestExecutionResult[], options?: ReportOptions) {
    const summary = TestReportGenerator.summarize(results);
    const rows = results.map(r => `
      <tr>
        <td>${r.testName}</td>
        <td>${r.status}</td>
        <td>${r.executionTime} ms</td>
        <td>${r.errorMessage || ''}</td>
        <td>${r.runAt}</td>
      </tr>
    `).join('\n');

    return `<!doctype html>
    <html>
    <head>
      <meta charset="utf-8" />
      <title>${options?.title || 'API Tester Report'}</title>
      <style>
        body { font-family: Arial, Helvetica, sans-serif; background: #f6f6f6; color: #222 }
        .container { max-width: 900px; margin: 24px auto; background: white; padding: 16px; border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.06) }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 8px 10px; border-bottom: 1px solid #eee; text-align: left }
        th { background: #fafafa }
        .pass { color: green; font-weight: bold }
        .fail { color: red; font-weight: bold }
        .error { color: darkred; font-weight: bold }
      </style>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>
    <body>
      <div class="container">
        <h1>${options?.title || 'API Tester Report'}</h1>
        <p>Generated by: ${options?.generatedBy || 'VerifyApi'} at ${new Date().toLocaleString()}</p>
        <h3>Charts</h3>
        <canvas id="summaryChart" width="600" height="200"></canvas>
        <script>
          const chartData = ${JSON.stringify({ passed: summary.passed, failed: summary.failed, skipped: summary.skipped })};
          (function(){
            try {
              const ctx = document.getElementById('summaryChart').getContext('2d');
              new Chart(ctx, {
                type: 'doughnut',
                data: {
                  labels: ['Passed', 'Failed', 'Skipped'],
                  datasets: [{
                    data: [chartData.passed, chartData.failed, chartData.skipped],
                    backgroundColor: ['#28a745', '#dc3545', '#ffc107']
                  }]
                },
                options: { plugins: { legend: { position: 'bottom' } } }
              });
            } catch (e) {
              console.warn('Chart rendering failed', e);
            }
          })();
        </script>
        <h3>Summary</h3>
        <ul>
          <li>Total tests: ${summary.total}</li>
          <li>Passed: ${summary.passed}</li>
          <li>Failed: ${summary.failed}</li>
          <li>Skipped: ${summary.skipped}</li>
        </ul>
        <h3>Details</h3>
        <table>
          <thead>
            <tr><th>Test</th><th>Status</th><th>Time</th><th>Error</th><th>RunAt</th></tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      </div>
    </body>
    </html>`;
  }

  private static summarize(results: TestExecutionResult[]) {
    const summary = { total: 0, passed: 0, failed: 0, skipped: 0 };
    summary.total = results.length;
    for (const r of results) {
      if (r.status === 'pass') summary.passed++;
      else if (r.status === 'fail' || r.status === 'error') summary.failed++;
      else if (r.status === 'skip') summary.skipped++;
    }
    return summary;
  }
}

export default TestReportGenerator;
